/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftRWService_H
#define ThriftRWService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "messenger_iot_types.h"

namespace thrift_gen {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ThriftRWServiceIf {
 public:
  virtual ~ThriftRWServiceIf() {}
  virtual bool ping() = 0;
  virtual void writeThriftMessage(std::string& _return, const ThriftMessage& _v) = 0;
  virtual void writeBool(std::string& _return, const std::string& _id, const bool _v) = 0;
  virtual void writeI16(std::string& _return, const std::string& _id, const int16_t _v) = 0;
  virtual void writeI32(std::string& _return, const std::string& _id, const int32_t _v) = 0;
  virtual void writeI64(std::string& _return, const std::string& _id, const int64_t _v) = 0;
  virtual void writeDouble(std::string& _return, const std::string& _id, const double _v) = 0;
  virtual void writeString(std::string& _return, const std::string& _id, const std::string& _v) = 0;
  virtual void readThriftMessage(ThriftMessage& _return, const std::string& _id) = 0;
  virtual bool readBool(const std::string& _id) = 0;
  virtual int16_t readI16(const std::string& _id) = 0;
  virtual int32_t readI32(const std::string& _id) = 0;
  virtual int64_t readI64(const std::string& _id) = 0;
  virtual double readDouble(const std::string& _id) = 0;
  virtual void readString(std::string& _return, const std::string& _id) = 0;
  virtual bool writeId(const std::string& _id) = 0;
  virtual void readId(std::vector<std::string> & _return) = 0;
};

class ThriftRWServiceIfFactory {
 public:
  typedef ThriftRWServiceIf Handler;

  virtual ~ThriftRWServiceIfFactory() {}

  virtual ThriftRWServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ThriftRWServiceIf* /* handler */) = 0;
};

class ThriftRWServiceIfSingletonFactory : virtual public ThriftRWServiceIfFactory {
 public:
  ThriftRWServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf>& iface) : iface_(iface) {}
  virtual ~ThriftRWServiceIfSingletonFactory() {}

  virtual ThriftRWServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ThriftRWServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf> iface_;
};

class ThriftRWServiceNull : virtual public ThriftRWServiceIf {
 public:
  virtual ~ThriftRWServiceNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  void writeThriftMessage(std::string& /* _return */, const ThriftMessage& /* _v */) {
    return;
  }
  void writeBool(std::string& /* _return */, const std::string& /* _id */, const bool /* _v */) {
    return;
  }
  void writeI16(std::string& /* _return */, const std::string& /* _id */, const int16_t /* _v */) {
    return;
  }
  void writeI32(std::string& /* _return */, const std::string& /* _id */, const int32_t /* _v */) {
    return;
  }
  void writeI64(std::string& /* _return */, const std::string& /* _id */, const int64_t /* _v */) {
    return;
  }
  void writeDouble(std::string& /* _return */, const std::string& /* _id */, const double /* _v */) {
    return;
  }
  void writeString(std::string& /* _return */, const std::string& /* _id */, const std::string& /* _v */) {
    return;
  }
  void readThriftMessage(ThriftMessage& /* _return */, const std::string& /* _id */) {
    return;
  }
  bool readBool(const std::string& /* _id */) {
    bool _return = false;
    return _return;
  }
  int16_t readI16(const std::string& /* _id */) {
    int16_t _return = 0;
    return _return;
  }
  int32_t readI32(const std::string& /* _id */) {
    int32_t _return = 0;
    return _return;
  }
  int64_t readI64(const std::string& /* _id */) {
    int64_t _return = 0;
    return _return;
  }
  double readDouble(const std::string& /* _id */) {
    double _return = (double)0;
    return _return;
  }
  void readString(std::string& /* _return */, const std::string& /* _id */) {
    return;
  }
  bool writeId(const std::string& /* _id */) {
    bool _return = false;
    return _return;
  }
  void readId(std::vector<std::string> & /* _return */) {
    return;
  }
};


class ThriftRWService_ping_args {
 public:

  ThriftRWService_ping_args(const ThriftRWService_ping_args&);
  ThriftRWService_ping_args& operator=(const ThriftRWService_ping_args&);
  ThriftRWService_ping_args() {
  }

  virtual ~ThriftRWService_ping_args() throw();

  bool operator == (const ThriftRWService_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftRWService_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_ping_pargs {
 public:


  virtual ~ThriftRWService_ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_ping_result__isset {
  _ThriftRWService_ping_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_ping_result__isset;

class ThriftRWService_ping_result {
 public:

  ThriftRWService_ping_result(const ThriftRWService_ping_result&);
  ThriftRWService_ping_result& operator=(const ThriftRWService_ping_result&);
  ThriftRWService_ping_result() : success(0) {
  }

  virtual ~ThriftRWService_ping_result() throw();
  bool success;
  InvalidOperationException e;

  _ThriftRWService_ping_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_ping_presult__isset {
  _ThriftRWService_ping_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_ping_presult__isset;

class ThriftRWService_ping_presult {
 public:


  virtual ~ThriftRWService_ping_presult() throw();
  bool* success;
  InvalidOperationException e;

  _ThriftRWService_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeThriftMessage_args__isset {
  _ThriftRWService_writeThriftMessage_args__isset() : _v(false) {}
  bool _v :1;
} _ThriftRWService_writeThriftMessage_args__isset;

class ThriftRWService_writeThriftMessage_args {
 public:

  ThriftRWService_writeThriftMessage_args(const ThriftRWService_writeThriftMessage_args&);
  ThriftRWService_writeThriftMessage_args& operator=(const ThriftRWService_writeThriftMessage_args&);
  ThriftRWService_writeThriftMessage_args() {
  }

  virtual ~ThriftRWService_writeThriftMessage_args() throw();
  ThriftMessage _v;

  _ThriftRWService_writeThriftMessage_args__isset __isset;

  void __set__v(const ThriftMessage& val);

  bool operator == (const ThriftRWService_writeThriftMessage_args & rhs) const
  {
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeThriftMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeThriftMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeThriftMessage_pargs {
 public:


  virtual ~ThriftRWService_writeThriftMessage_pargs() throw();
  const ThriftMessage* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeThriftMessage_result__isset {
  _ThriftRWService_writeThriftMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeThriftMessage_result__isset;

class ThriftRWService_writeThriftMessage_result {
 public:

  ThriftRWService_writeThriftMessage_result(const ThriftRWService_writeThriftMessage_result&);
  ThriftRWService_writeThriftMessage_result& operator=(const ThriftRWService_writeThriftMessage_result&);
  ThriftRWService_writeThriftMessage_result() : success() {
  }

  virtual ~ThriftRWService_writeThriftMessage_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeThriftMessage_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeThriftMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeThriftMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeThriftMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeThriftMessage_presult__isset {
  _ThriftRWService_writeThriftMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeThriftMessage_presult__isset;

class ThriftRWService_writeThriftMessage_presult {
 public:


  virtual ~ThriftRWService_writeThriftMessage_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeThriftMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeBool_args__isset {
  _ThriftRWService_writeBool_args__isset() : _id(false), _v(false) {}
  bool _id :1;
  bool _v :1;
} _ThriftRWService_writeBool_args__isset;

class ThriftRWService_writeBool_args {
 public:

  ThriftRWService_writeBool_args(const ThriftRWService_writeBool_args&);
  ThriftRWService_writeBool_args& operator=(const ThriftRWService_writeBool_args&);
  ThriftRWService_writeBool_args() : _id(), _v(0) {
  }

  virtual ~ThriftRWService_writeBool_args() throw();
  std::string _id;
  bool _v;

  _ThriftRWService_writeBool_args__isset __isset;

  void __set__id(const std::string& val);

  void __set__v(const bool val);

  bool operator == (const ThriftRWService_writeBool_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeBool_pargs {
 public:


  virtual ~ThriftRWService_writeBool_pargs() throw();
  const std::string* _id;
  const bool* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeBool_result__isset {
  _ThriftRWService_writeBool_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeBool_result__isset;

class ThriftRWService_writeBool_result {
 public:

  ThriftRWService_writeBool_result(const ThriftRWService_writeBool_result&);
  ThriftRWService_writeBool_result& operator=(const ThriftRWService_writeBool_result&);
  ThriftRWService_writeBool_result() : success() {
  }

  virtual ~ThriftRWService_writeBool_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeBool_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeBool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeBool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeBool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeBool_presult__isset {
  _ThriftRWService_writeBool_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeBool_presult__isset;

class ThriftRWService_writeBool_presult {
 public:


  virtual ~ThriftRWService_writeBool_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeBool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeI16_args__isset {
  _ThriftRWService_writeI16_args__isset() : _id(false), _v(false) {}
  bool _id :1;
  bool _v :1;
} _ThriftRWService_writeI16_args__isset;

class ThriftRWService_writeI16_args {
 public:

  ThriftRWService_writeI16_args(const ThriftRWService_writeI16_args&);
  ThriftRWService_writeI16_args& operator=(const ThriftRWService_writeI16_args&);
  ThriftRWService_writeI16_args() : _id(), _v(0) {
  }

  virtual ~ThriftRWService_writeI16_args() throw();
  std::string _id;
  int16_t _v;

  _ThriftRWService_writeI16_args__isset __isset;

  void __set__id(const std::string& val);

  void __set__v(const int16_t val);

  bool operator == (const ThriftRWService_writeI16_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeI16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeI16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeI16_pargs {
 public:


  virtual ~ThriftRWService_writeI16_pargs() throw();
  const std::string* _id;
  const int16_t* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeI16_result__isset {
  _ThriftRWService_writeI16_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeI16_result__isset;

class ThriftRWService_writeI16_result {
 public:

  ThriftRWService_writeI16_result(const ThriftRWService_writeI16_result&);
  ThriftRWService_writeI16_result& operator=(const ThriftRWService_writeI16_result&);
  ThriftRWService_writeI16_result() : success() {
  }

  virtual ~ThriftRWService_writeI16_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeI16_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeI16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeI16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeI16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeI16_presult__isset {
  _ThriftRWService_writeI16_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeI16_presult__isset;

class ThriftRWService_writeI16_presult {
 public:


  virtual ~ThriftRWService_writeI16_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeI16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeI32_args__isset {
  _ThriftRWService_writeI32_args__isset() : _id(false), _v(false) {}
  bool _id :1;
  bool _v :1;
} _ThriftRWService_writeI32_args__isset;

class ThriftRWService_writeI32_args {
 public:

  ThriftRWService_writeI32_args(const ThriftRWService_writeI32_args&);
  ThriftRWService_writeI32_args& operator=(const ThriftRWService_writeI32_args&);
  ThriftRWService_writeI32_args() : _id(), _v(0) {
  }

  virtual ~ThriftRWService_writeI32_args() throw();
  std::string _id;
  int32_t _v;

  _ThriftRWService_writeI32_args__isset __isset;

  void __set__id(const std::string& val);

  void __set__v(const int32_t val);

  bool operator == (const ThriftRWService_writeI32_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeI32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeI32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeI32_pargs {
 public:


  virtual ~ThriftRWService_writeI32_pargs() throw();
  const std::string* _id;
  const int32_t* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeI32_result__isset {
  _ThriftRWService_writeI32_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeI32_result__isset;

class ThriftRWService_writeI32_result {
 public:

  ThriftRWService_writeI32_result(const ThriftRWService_writeI32_result&);
  ThriftRWService_writeI32_result& operator=(const ThriftRWService_writeI32_result&);
  ThriftRWService_writeI32_result() : success() {
  }

  virtual ~ThriftRWService_writeI32_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeI32_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeI32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeI32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeI32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeI32_presult__isset {
  _ThriftRWService_writeI32_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeI32_presult__isset;

class ThriftRWService_writeI32_presult {
 public:


  virtual ~ThriftRWService_writeI32_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeI32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeI64_args__isset {
  _ThriftRWService_writeI64_args__isset() : _id(false), _v(false) {}
  bool _id :1;
  bool _v :1;
} _ThriftRWService_writeI64_args__isset;

class ThriftRWService_writeI64_args {
 public:

  ThriftRWService_writeI64_args(const ThriftRWService_writeI64_args&);
  ThriftRWService_writeI64_args& operator=(const ThriftRWService_writeI64_args&);
  ThriftRWService_writeI64_args() : _id(), _v(0) {
  }

  virtual ~ThriftRWService_writeI64_args() throw();
  std::string _id;
  int64_t _v;

  _ThriftRWService_writeI64_args__isset __isset;

  void __set__id(const std::string& val);

  void __set__v(const int64_t val);

  bool operator == (const ThriftRWService_writeI64_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeI64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeI64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeI64_pargs {
 public:


  virtual ~ThriftRWService_writeI64_pargs() throw();
  const std::string* _id;
  const int64_t* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeI64_result__isset {
  _ThriftRWService_writeI64_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeI64_result__isset;

class ThriftRWService_writeI64_result {
 public:

  ThriftRWService_writeI64_result(const ThriftRWService_writeI64_result&);
  ThriftRWService_writeI64_result& operator=(const ThriftRWService_writeI64_result&);
  ThriftRWService_writeI64_result() : success() {
  }

  virtual ~ThriftRWService_writeI64_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeI64_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeI64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeI64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeI64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeI64_presult__isset {
  _ThriftRWService_writeI64_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeI64_presult__isset;

class ThriftRWService_writeI64_presult {
 public:


  virtual ~ThriftRWService_writeI64_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeI64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeDouble_args__isset {
  _ThriftRWService_writeDouble_args__isset() : _id(false), _v(false) {}
  bool _id :1;
  bool _v :1;
} _ThriftRWService_writeDouble_args__isset;

class ThriftRWService_writeDouble_args {
 public:

  ThriftRWService_writeDouble_args(const ThriftRWService_writeDouble_args&);
  ThriftRWService_writeDouble_args& operator=(const ThriftRWService_writeDouble_args&);
  ThriftRWService_writeDouble_args() : _id(), _v(0) {
  }

  virtual ~ThriftRWService_writeDouble_args() throw();
  std::string _id;
  double _v;

  _ThriftRWService_writeDouble_args__isset __isset;

  void __set__id(const std::string& val);

  void __set__v(const double val);

  bool operator == (const ThriftRWService_writeDouble_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeDouble_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeDouble_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeDouble_pargs {
 public:


  virtual ~ThriftRWService_writeDouble_pargs() throw();
  const std::string* _id;
  const double* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeDouble_result__isset {
  _ThriftRWService_writeDouble_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeDouble_result__isset;

class ThriftRWService_writeDouble_result {
 public:

  ThriftRWService_writeDouble_result(const ThriftRWService_writeDouble_result&);
  ThriftRWService_writeDouble_result& operator=(const ThriftRWService_writeDouble_result&);
  ThriftRWService_writeDouble_result() : success() {
  }

  virtual ~ThriftRWService_writeDouble_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeDouble_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeDouble_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeDouble_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeDouble_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeDouble_presult__isset {
  _ThriftRWService_writeDouble_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeDouble_presult__isset;

class ThriftRWService_writeDouble_presult {
 public:


  virtual ~ThriftRWService_writeDouble_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeDouble_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeString_args__isset {
  _ThriftRWService_writeString_args__isset() : _id(false), _v(false) {}
  bool _id :1;
  bool _v :1;
} _ThriftRWService_writeString_args__isset;

class ThriftRWService_writeString_args {
 public:

  ThriftRWService_writeString_args(const ThriftRWService_writeString_args&);
  ThriftRWService_writeString_args& operator=(const ThriftRWService_writeString_args&);
  ThriftRWService_writeString_args() : _id(), _v() {
  }

  virtual ~ThriftRWService_writeString_args() throw();
  std::string _id;
  std::string _v;

  _ThriftRWService_writeString_args__isset __isset;

  void __set__id(const std::string& val);

  void __set__v(const std::string& val);

  bool operator == (const ThriftRWService_writeString_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    if (!(_v == rhs._v))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeString_pargs {
 public:


  virtual ~ThriftRWService_writeString_pargs() throw();
  const std::string* _id;
  const std::string* _v;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeString_result__isset {
  _ThriftRWService_writeString_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeString_result__isset;

class ThriftRWService_writeString_result {
 public:

  ThriftRWService_writeString_result(const ThriftRWService_writeString_result&);
  ThriftRWService_writeString_result& operator=(const ThriftRWService_writeString_result&);
  ThriftRWService_writeString_result() : success() {
  }

  virtual ~ThriftRWService_writeString_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_writeString_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeString_presult__isset {
  _ThriftRWService_writeString_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeString_presult__isset;

class ThriftRWService_writeString_presult {
 public:


  virtual ~ThriftRWService_writeString_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_writeString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readThriftMessage_args__isset {
  _ThriftRWService_readThriftMessage_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readThriftMessage_args__isset;

class ThriftRWService_readThriftMessage_args {
 public:

  ThriftRWService_readThriftMessage_args(const ThriftRWService_readThriftMessage_args&);
  ThriftRWService_readThriftMessage_args& operator=(const ThriftRWService_readThriftMessage_args&);
  ThriftRWService_readThriftMessage_args() : _id() {
  }

  virtual ~ThriftRWService_readThriftMessage_args() throw();
  std::string _id;

  _ThriftRWService_readThriftMessage_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readThriftMessage_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readThriftMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readThriftMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readThriftMessage_pargs {
 public:


  virtual ~ThriftRWService_readThriftMessage_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readThriftMessage_result__isset {
  _ThriftRWService_readThriftMessage_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readThriftMessage_result__isset;

class ThriftRWService_readThriftMessage_result {
 public:

  ThriftRWService_readThriftMessage_result(const ThriftRWService_readThriftMessage_result&);
  ThriftRWService_readThriftMessage_result& operator=(const ThriftRWService_readThriftMessage_result&);
  ThriftRWService_readThriftMessage_result() {
  }

  virtual ~ThriftRWService_readThriftMessage_result() throw();
  ThriftMessage success;
  InvalidOperationException e;

  _ThriftRWService_readThriftMessage_result__isset __isset;

  void __set_success(const ThriftMessage& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readThriftMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readThriftMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readThriftMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readThriftMessage_presult__isset {
  _ThriftRWService_readThriftMessage_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readThriftMessage_presult__isset;

class ThriftRWService_readThriftMessage_presult {
 public:


  virtual ~ThriftRWService_readThriftMessage_presult() throw();
  ThriftMessage* success;
  InvalidOperationException e;

  _ThriftRWService_readThriftMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readBool_args__isset {
  _ThriftRWService_readBool_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readBool_args__isset;

class ThriftRWService_readBool_args {
 public:

  ThriftRWService_readBool_args(const ThriftRWService_readBool_args&);
  ThriftRWService_readBool_args& operator=(const ThriftRWService_readBool_args&);
  ThriftRWService_readBool_args() : _id() {
  }

  virtual ~ThriftRWService_readBool_args() throw();
  std::string _id;

  _ThriftRWService_readBool_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readBool_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readBool_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readBool_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readBool_pargs {
 public:


  virtual ~ThriftRWService_readBool_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readBool_result__isset {
  _ThriftRWService_readBool_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readBool_result__isset;

class ThriftRWService_readBool_result {
 public:

  ThriftRWService_readBool_result(const ThriftRWService_readBool_result&);
  ThriftRWService_readBool_result& operator=(const ThriftRWService_readBool_result&);
  ThriftRWService_readBool_result() : success(0) {
  }

  virtual ~ThriftRWService_readBool_result() throw();
  bool success;
  InvalidOperationException e;

  _ThriftRWService_readBool_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readBool_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readBool_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readBool_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readBool_presult__isset {
  _ThriftRWService_readBool_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readBool_presult__isset;

class ThriftRWService_readBool_presult {
 public:


  virtual ~ThriftRWService_readBool_presult() throw();
  bool* success;
  InvalidOperationException e;

  _ThriftRWService_readBool_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readI16_args__isset {
  _ThriftRWService_readI16_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readI16_args__isset;

class ThriftRWService_readI16_args {
 public:

  ThriftRWService_readI16_args(const ThriftRWService_readI16_args&);
  ThriftRWService_readI16_args& operator=(const ThriftRWService_readI16_args&);
  ThriftRWService_readI16_args() : _id() {
  }

  virtual ~ThriftRWService_readI16_args() throw();
  std::string _id;

  _ThriftRWService_readI16_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readI16_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readI16_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readI16_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readI16_pargs {
 public:


  virtual ~ThriftRWService_readI16_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readI16_result__isset {
  _ThriftRWService_readI16_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readI16_result__isset;

class ThriftRWService_readI16_result {
 public:

  ThriftRWService_readI16_result(const ThriftRWService_readI16_result&);
  ThriftRWService_readI16_result& operator=(const ThriftRWService_readI16_result&);
  ThriftRWService_readI16_result() : success(0) {
  }

  virtual ~ThriftRWService_readI16_result() throw();
  int16_t success;
  InvalidOperationException e;

  _ThriftRWService_readI16_result__isset __isset;

  void __set_success(const int16_t val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readI16_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readI16_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readI16_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readI16_presult__isset {
  _ThriftRWService_readI16_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readI16_presult__isset;

class ThriftRWService_readI16_presult {
 public:


  virtual ~ThriftRWService_readI16_presult() throw();
  int16_t* success;
  InvalidOperationException e;

  _ThriftRWService_readI16_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readI32_args__isset {
  _ThriftRWService_readI32_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readI32_args__isset;

class ThriftRWService_readI32_args {
 public:

  ThriftRWService_readI32_args(const ThriftRWService_readI32_args&);
  ThriftRWService_readI32_args& operator=(const ThriftRWService_readI32_args&);
  ThriftRWService_readI32_args() : _id() {
  }

  virtual ~ThriftRWService_readI32_args() throw();
  std::string _id;

  _ThriftRWService_readI32_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readI32_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readI32_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readI32_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readI32_pargs {
 public:


  virtual ~ThriftRWService_readI32_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readI32_result__isset {
  _ThriftRWService_readI32_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readI32_result__isset;

class ThriftRWService_readI32_result {
 public:

  ThriftRWService_readI32_result(const ThriftRWService_readI32_result&);
  ThriftRWService_readI32_result& operator=(const ThriftRWService_readI32_result&);
  ThriftRWService_readI32_result() : success(0) {
  }

  virtual ~ThriftRWService_readI32_result() throw();
  int32_t success;
  InvalidOperationException e;

  _ThriftRWService_readI32_result__isset __isset;

  void __set_success(const int32_t val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readI32_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readI32_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readI32_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readI32_presult__isset {
  _ThriftRWService_readI32_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readI32_presult__isset;

class ThriftRWService_readI32_presult {
 public:


  virtual ~ThriftRWService_readI32_presult() throw();
  int32_t* success;
  InvalidOperationException e;

  _ThriftRWService_readI32_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readI64_args__isset {
  _ThriftRWService_readI64_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readI64_args__isset;

class ThriftRWService_readI64_args {
 public:

  ThriftRWService_readI64_args(const ThriftRWService_readI64_args&);
  ThriftRWService_readI64_args& operator=(const ThriftRWService_readI64_args&);
  ThriftRWService_readI64_args() : _id() {
  }

  virtual ~ThriftRWService_readI64_args() throw();
  std::string _id;

  _ThriftRWService_readI64_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readI64_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readI64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readI64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readI64_pargs {
 public:


  virtual ~ThriftRWService_readI64_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readI64_result__isset {
  _ThriftRWService_readI64_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readI64_result__isset;

class ThriftRWService_readI64_result {
 public:

  ThriftRWService_readI64_result(const ThriftRWService_readI64_result&);
  ThriftRWService_readI64_result& operator=(const ThriftRWService_readI64_result&);
  ThriftRWService_readI64_result() : success(0) {
  }

  virtual ~ThriftRWService_readI64_result() throw();
  int64_t success;
  InvalidOperationException e;

  _ThriftRWService_readI64_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readI64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readI64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readI64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readI64_presult__isset {
  _ThriftRWService_readI64_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readI64_presult__isset;

class ThriftRWService_readI64_presult {
 public:


  virtual ~ThriftRWService_readI64_presult() throw();
  int64_t* success;
  InvalidOperationException e;

  _ThriftRWService_readI64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readDouble_args__isset {
  _ThriftRWService_readDouble_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readDouble_args__isset;

class ThriftRWService_readDouble_args {
 public:

  ThriftRWService_readDouble_args(const ThriftRWService_readDouble_args&);
  ThriftRWService_readDouble_args& operator=(const ThriftRWService_readDouble_args&);
  ThriftRWService_readDouble_args() : _id() {
  }

  virtual ~ThriftRWService_readDouble_args() throw();
  std::string _id;

  _ThriftRWService_readDouble_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readDouble_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readDouble_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readDouble_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readDouble_pargs {
 public:


  virtual ~ThriftRWService_readDouble_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readDouble_result__isset {
  _ThriftRWService_readDouble_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readDouble_result__isset;

class ThriftRWService_readDouble_result {
 public:

  ThriftRWService_readDouble_result(const ThriftRWService_readDouble_result&);
  ThriftRWService_readDouble_result& operator=(const ThriftRWService_readDouble_result&);
  ThriftRWService_readDouble_result() : success(0) {
  }

  virtual ~ThriftRWService_readDouble_result() throw();
  double success;
  InvalidOperationException e;

  _ThriftRWService_readDouble_result__isset __isset;

  void __set_success(const double val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readDouble_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readDouble_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readDouble_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readDouble_presult__isset {
  _ThriftRWService_readDouble_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readDouble_presult__isset;

class ThriftRWService_readDouble_presult {
 public:


  virtual ~ThriftRWService_readDouble_presult() throw();
  double* success;
  InvalidOperationException e;

  _ThriftRWService_readDouble_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_readString_args__isset {
  _ThriftRWService_readString_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_readString_args__isset;

class ThriftRWService_readString_args {
 public:

  ThriftRWService_readString_args(const ThriftRWService_readString_args&);
  ThriftRWService_readString_args& operator=(const ThriftRWService_readString_args&);
  ThriftRWService_readString_args() : _id() {
  }

  virtual ~ThriftRWService_readString_args() throw();
  std::string _id;

  _ThriftRWService_readString_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_readString_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readString_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readString_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readString_pargs {
 public:


  virtual ~ThriftRWService_readString_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readString_result__isset {
  _ThriftRWService_readString_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readString_result__isset;

class ThriftRWService_readString_result {
 public:

  ThriftRWService_readString_result(const ThriftRWService_readString_result&);
  ThriftRWService_readString_result& operator=(const ThriftRWService_readString_result&);
  ThriftRWService_readString_result() : success() {
  }

  virtual ~ThriftRWService_readString_result() throw();
  std::string success;
  InvalidOperationException e;

  _ThriftRWService_readString_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readString_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readString_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readString_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readString_presult__isset {
  _ThriftRWService_readString_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readString_presult__isset;

class ThriftRWService_readString_presult {
 public:


  virtual ~ThriftRWService_readString_presult() throw();
  std::string* success;
  InvalidOperationException e;

  _ThriftRWService_readString_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ThriftRWService_writeId_args__isset {
  _ThriftRWService_writeId_args__isset() : _id(false) {}
  bool _id :1;
} _ThriftRWService_writeId_args__isset;

class ThriftRWService_writeId_args {
 public:

  ThriftRWService_writeId_args(const ThriftRWService_writeId_args&);
  ThriftRWService_writeId_args& operator=(const ThriftRWService_writeId_args&);
  ThriftRWService_writeId_args() : _id() {
  }

  virtual ~ThriftRWService_writeId_args() throw();
  std::string _id;

  _ThriftRWService_writeId_args__isset __isset;

  void __set__id(const std::string& val);

  bool operator == (const ThriftRWService_writeId_args & rhs) const
  {
    if (!(_id == rhs._id))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_writeId_pargs {
 public:


  virtual ~ThriftRWService_writeId_pargs() throw();
  const std::string* _id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeId_result__isset {
  _ThriftRWService_writeId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeId_result__isset;

class ThriftRWService_writeId_result {
 public:

  ThriftRWService_writeId_result(const ThriftRWService_writeId_result&);
  ThriftRWService_writeId_result& operator=(const ThriftRWService_writeId_result&);
  ThriftRWService_writeId_result() : success(0) {
  }

  virtual ~ThriftRWService_writeId_result() throw();
  bool success;
  InvalidOperationException e;

  _ThriftRWService_writeId_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_writeId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_writeId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_writeId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_writeId_presult__isset {
  _ThriftRWService_writeId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_writeId_presult__isset;

class ThriftRWService_writeId_presult {
 public:


  virtual ~ThriftRWService_writeId_presult() throw();
  bool* success;
  InvalidOperationException e;

  _ThriftRWService_writeId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ThriftRWService_readId_args {
 public:

  ThriftRWService_readId_args(const ThriftRWService_readId_args&);
  ThriftRWService_readId_args& operator=(const ThriftRWService_readId_args&);
  ThriftRWService_readId_args() {
  }

  virtual ~ThriftRWService_readId_args() throw();

  bool operator == (const ThriftRWService_readId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftRWService_readId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ThriftRWService_readId_pargs {
 public:


  virtual ~ThriftRWService_readId_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readId_result__isset {
  _ThriftRWService_readId_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readId_result__isset;

class ThriftRWService_readId_result {
 public:

  ThriftRWService_readId_result(const ThriftRWService_readId_result&);
  ThriftRWService_readId_result& operator=(const ThriftRWService_readId_result&);
  ThriftRWService_readId_result() {
  }

  virtual ~ThriftRWService_readId_result() throw();
  std::vector<std::string>  success;
  InvalidOperationException e;

  _ThriftRWService_readId_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const InvalidOperationException& val);

  bool operator == (const ThriftRWService_readId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const ThriftRWService_readId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftRWService_readId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ThriftRWService_readId_presult__isset {
  _ThriftRWService_readId_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _ThriftRWService_readId_presult__isset;

class ThriftRWService_readId_presult {
 public:


  virtual ~ThriftRWService_readId_presult() throw();
  std::vector<std::string> * success;
  InvalidOperationException e;

  _ThriftRWService_readId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ThriftRWServiceClient : virtual public ThriftRWServiceIf {
 public:
  ThriftRWServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftRWServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  void writeThriftMessage(std::string& _return, const ThriftMessage& _v);
  void send_writeThriftMessage(const ThriftMessage& _v);
  void recv_writeThriftMessage(std::string& _return);
  void writeBool(std::string& _return, const std::string& _id, const bool _v);
  void send_writeBool(const std::string& _id, const bool _v);
  void recv_writeBool(std::string& _return);
  void writeI16(std::string& _return, const std::string& _id, const int16_t _v);
  void send_writeI16(const std::string& _id, const int16_t _v);
  void recv_writeI16(std::string& _return);
  void writeI32(std::string& _return, const std::string& _id, const int32_t _v);
  void send_writeI32(const std::string& _id, const int32_t _v);
  void recv_writeI32(std::string& _return);
  void writeI64(std::string& _return, const std::string& _id, const int64_t _v);
  void send_writeI64(const std::string& _id, const int64_t _v);
  void recv_writeI64(std::string& _return);
  void writeDouble(std::string& _return, const std::string& _id, const double _v);
  void send_writeDouble(const std::string& _id, const double _v);
  void recv_writeDouble(std::string& _return);
  void writeString(std::string& _return, const std::string& _id, const std::string& _v);
  void send_writeString(const std::string& _id, const std::string& _v);
  void recv_writeString(std::string& _return);
  void readThriftMessage(ThriftMessage& _return, const std::string& _id);
  void send_readThriftMessage(const std::string& _id);
  void recv_readThriftMessage(ThriftMessage& _return);
  bool readBool(const std::string& _id);
  void send_readBool(const std::string& _id);
  bool recv_readBool();
  int16_t readI16(const std::string& _id);
  void send_readI16(const std::string& _id);
  int16_t recv_readI16();
  int32_t readI32(const std::string& _id);
  void send_readI32(const std::string& _id);
  int32_t recv_readI32();
  int64_t readI64(const std::string& _id);
  void send_readI64(const std::string& _id);
  int64_t recv_readI64();
  double readDouble(const std::string& _id);
  void send_readDouble(const std::string& _id);
  double recv_readDouble();
  void readString(std::string& _return, const std::string& _id);
  void send_readString(const std::string& _id);
  void recv_readString(std::string& _return);
  bool writeId(const std::string& _id);
  void send_writeId(const std::string& _id);
  bool recv_writeId();
  void readId(std::vector<std::string> & _return);
  void send_readId();
  void recv_readId(std::vector<std::string> & _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ThriftRWServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftRWServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeThriftMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeI16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeI32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeI64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeDouble(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readThriftMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readBool(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readI16(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readI32(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readI64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readDouble(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readString(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_writeId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftRWServiceProcessor(::apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &ThriftRWServiceProcessor::process_ping;
    processMap_["writeThriftMessage"] = &ThriftRWServiceProcessor::process_writeThriftMessage;
    processMap_["writeBool"] = &ThriftRWServiceProcessor::process_writeBool;
    processMap_["writeI16"] = &ThriftRWServiceProcessor::process_writeI16;
    processMap_["writeI32"] = &ThriftRWServiceProcessor::process_writeI32;
    processMap_["writeI64"] = &ThriftRWServiceProcessor::process_writeI64;
    processMap_["writeDouble"] = &ThriftRWServiceProcessor::process_writeDouble;
    processMap_["writeString"] = &ThriftRWServiceProcessor::process_writeString;
    processMap_["readThriftMessage"] = &ThriftRWServiceProcessor::process_readThriftMessage;
    processMap_["readBool"] = &ThriftRWServiceProcessor::process_readBool;
    processMap_["readI16"] = &ThriftRWServiceProcessor::process_readI16;
    processMap_["readI32"] = &ThriftRWServiceProcessor::process_readI32;
    processMap_["readI64"] = &ThriftRWServiceProcessor::process_readI64;
    processMap_["readDouble"] = &ThriftRWServiceProcessor::process_readDouble;
    processMap_["readString"] = &ThriftRWServiceProcessor::process_readString;
    processMap_["writeId"] = &ThriftRWServiceProcessor::process_writeId;
    processMap_["readId"] = &ThriftRWServiceProcessor::process_readId;
  }

  virtual ~ThriftRWServiceProcessor() {}
};

class ThriftRWServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftRWServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ThriftRWServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ThriftRWServiceIfFactory > handlerFactory_;
};

class ThriftRWServiceMultiface : virtual public ThriftRWServiceIf {
 public:
  ThriftRWServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ThriftRWServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf> > ifaces_;
  ThriftRWServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ThriftRWServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  void writeThriftMessage(std::string& _return, const ThriftMessage& _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeThriftMessage(_return, _v);
    }
    ifaces_[i]->writeThriftMessage(_return, _v);
    return;
  }

  void writeBool(std::string& _return, const std::string& _id, const bool _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeBool(_return, _id, _v);
    }
    ifaces_[i]->writeBool(_return, _id, _v);
    return;
  }

  void writeI16(std::string& _return, const std::string& _id, const int16_t _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeI16(_return, _id, _v);
    }
    ifaces_[i]->writeI16(_return, _id, _v);
    return;
  }

  void writeI32(std::string& _return, const std::string& _id, const int32_t _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeI32(_return, _id, _v);
    }
    ifaces_[i]->writeI32(_return, _id, _v);
    return;
  }

  void writeI64(std::string& _return, const std::string& _id, const int64_t _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeI64(_return, _id, _v);
    }
    ifaces_[i]->writeI64(_return, _id, _v);
    return;
  }

  void writeDouble(std::string& _return, const std::string& _id, const double _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeDouble(_return, _id, _v);
    }
    ifaces_[i]->writeDouble(_return, _id, _v);
    return;
  }

  void writeString(std::string& _return, const std::string& _id, const std::string& _v) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeString(_return, _id, _v);
    }
    ifaces_[i]->writeString(_return, _id, _v);
    return;
  }

  void readThriftMessage(ThriftMessage& _return, const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readThriftMessage(_return, _id);
    }
    ifaces_[i]->readThriftMessage(_return, _id);
    return;
  }

  bool readBool(const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readBool(_id);
    }
    return ifaces_[i]->readBool(_id);
  }

  int16_t readI16(const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readI16(_id);
    }
    return ifaces_[i]->readI16(_id);
  }

  int32_t readI32(const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readI32(_id);
    }
    return ifaces_[i]->readI32(_id);
  }

  int64_t readI64(const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readI64(_id);
    }
    return ifaces_[i]->readI64(_id);
  }

  double readDouble(const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readDouble(_id);
    }
    return ifaces_[i]->readDouble(_id);
  }

  void readString(std::string& _return, const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readString(_return, _id);
    }
    ifaces_[i]->readString(_return, _id);
    return;
  }

  bool writeId(const std::string& _id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeId(_id);
    }
    return ifaces_[i]->writeId(_id);
  }

  void readId(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readId(_return);
    }
    ifaces_[i]->readId(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ThriftRWServiceConcurrentClient : virtual public ThriftRWServiceIf {
 public:
  ThriftRWServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ThriftRWServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  int32_t send_ping();
  bool recv_ping(const int32_t seqid);
  void writeThriftMessage(std::string& _return, const ThriftMessage& _v);
  int32_t send_writeThriftMessage(const ThriftMessage& _v);
  void recv_writeThriftMessage(std::string& _return, const int32_t seqid);
  void writeBool(std::string& _return, const std::string& _id, const bool _v);
  int32_t send_writeBool(const std::string& _id, const bool _v);
  void recv_writeBool(std::string& _return, const int32_t seqid);
  void writeI16(std::string& _return, const std::string& _id, const int16_t _v);
  int32_t send_writeI16(const std::string& _id, const int16_t _v);
  void recv_writeI16(std::string& _return, const int32_t seqid);
  void writeI32(std::string& _return, const std::string& _id, const int32_t _v);
  int32_t send_writeI32(const std::string& _id, const int32_t _v);
  void recv_writeI32(std::string& _return, const int32_t seqid);
  void writeI64(std::string& _return, const std::string& _id, const int64_t _v);
  int32_t send_writeI64(const std::string& _id, const int64_t _v);
  void recv_writeI64(std::string& _return, const int32_t seqid);
  void writeDouble(std::string& _return, const std::string& _id, const double _v);
  int32_t send_writeDouble(const std::string& _id, const double _v);
  void recv_writeDouble(std::string& _return, const int32_t seqid);
  void writeString(std::string& _return, const std::string& _id, const std::string& _v);
  int32_t send_writeString(const std::string& _id, const std::string& _v);
  void recv_writeString(std::string& _return, const int32_t seqid);
  void readThriftMessage(ThriftMessage& _return, const std::string& _id);
  int32_t send_readThriftMessage(const std::string& _id);
  void recv_readThriftMessage(ThriftMessage& _return, const int32_t seqid);
  bool readBool(const std::string& _id);
  int32_t send_readBool(const std::string& _id);
  bool recv_readBool(const int32_t seqid);
  int16_t readI16(const std::string& _id);
  int32_t send_readI16(const std::string& _id);
  int16_t recv_readI16(const int32_t seqid);
  int32_t readI32(const std::string& _id);
  int32_t send_readI32(const std::string& _id);
  int32_t recv_readI32(const int32_t seqid);
  int64_t readI64(const std::string& _id);
  int32_t send_readI64(const std::string& _id);
  int64_t recv_readI64(const int32_t seqid);
  double readDouble(const std::string& _id);
  int32_t send_readDouble(const std::string& _id);
  double recv_readDouble(const int32_t seqid);
  void readString(std::string& _return, const std::string& _id);
  int32_t send_readString(const std::string& _id);
  void recv_readString(std::string& _return, const int32_t seqid);
  bool writeId(const std::string& _id);
  int32_t send_writeId(const std::string& _id);
  bool recv_writeId(const int32_t seqid);
  void readId(std::vector<std::string> & _return);
  int32_t send_readId();
  void recv_readId(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
